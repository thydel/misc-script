#!/usr/bin/make -f

MAKEFLAGS += -Rr
SHELL != which bash
.DEFAULT_GOAL := main
.PHONY: main

tmp := .gmk
self := $(lastword $(MAKEFILE_LIST))
file ?= gmk
$(self): $(tmp)/$(file).mk;

include $(tmp)/$(file).mk

dirs := $(tmp)
stones := $(dirs:%=%/.stone)
$(self): $(stones)
%/.stone:; mkdir -p $(@D); touch $@

versions := $(repos:%=%/version)
main: $(versions)

indent := 2
yaml2json.py := import sys, yaml, json;
yaml2json.py += json.dump(yaml.load(sys.stdin), sys.stdout, indent=$(indent), default=str, sort_keys=True)
yaml2json_py := python -c '$(yaml2json.py)'

yml2js := python -c '$(yaml2json.py)'

$(tmp)/$(file).js: $(file).yml; < $< $(yml2js) > $@

js2mk.jq := .[]
js2mk.jq += | select(.name)
js2mk.jq += | . as $$a | to_entries
js2mk.jq += | map($$a.name + "." + .key + " := " + .value)
js2mk.jq += | . += [ "repos += " + $$a.name ]
js2mk.jq += | join("\n")

js2mk := jq -r '$(js2mk.jq)'

$(tmp)/$(file).mk: $(tmp)/$(file).js; < $< $(js2mk) > $@

clone = GIT_SSH_COMMAND="ssh -i ~/.ssh/$($1.key)" git clone -b $($1.version) $($1.src) $$@

define repo
$(eval dir := $($1.dir)/$1)
$(eval $1.head != git -C $(dir) rev-parse --abbrev-ref HEAD)
$(dir):; $(clone)
$1: $(dir)
.PHONY: $1
$1/version: $$(shell test $($1.head) == $($1.version) || echo $1/checkout)
endef

%/checkout:; git -C $($*.dir)/$* checkout $($*.version)

$(foreach _, $(repos), $(eval $(call repo,$_)))
