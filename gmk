#!/usr/bin/make -f

MAKEFLAGS += -Rr --warn-undefined-variables
SHELL != which bash
.DEFAULT_GOAL := main
.PHONY: main

git.test := git rev-parse --is-inside-work-tree > /dev/null 2>&1 || date
. := $(and $(shell $(git.test)),$(error not in a git dir))
git.dir != git rev-parse --git-dir
git.exclude := $(git.dir)/info/exclude

tmp := .gmk
self := $(lastword $(MAKEFILE_LIST))
file ?= gmk

adam := $(tmp)/.adam
ultimo := /proc/self
$(ultimo):;
$(adam):; touch -d @0 $@
old-or-young := && echo $(adam) || echo $(ultimo)
lineinfile = $(eval $2:: $(shell grep -q '$1' $2 $(old-or-young)); echo '$1' >> $$@)

dirs := $(tmp)
stones := $(dirs:%=%/.stone)
mailmap := .mailmap
$(self): $(stones) $(adam) do-mailmap
%/.stone:; mkdir -p $(@D); touch $@
do-mailmap: $(shell test -f $(mailmap) || touch $(mailmap))
.PHONY: do-mailmap
$(call lineinfile,$(tmp),$(git.exclude))
$(call lineinfile,$(mailmap),$(git.exclude))

$(self): $(tmp)/$(file).mk;
include $(tmp)/$(file).mk

actions := clone ssh conf sync status pull
define action
$(eval action.$1 := $(repos:%=%/$1))
$1: $(action.$1)
endef
$(foreach _, $(actions), $(eval $(call action,$_)))
.PHONY: $(actions)

init: ssh exclude; $(self) --no-print-directory conf mailmap
main: sync

yml2js.py := import sys, yaml, json;
yml2js.py += json.dump(yaml.load(sys.stdin), sys.stdout, indent=2, default=str, sort_keys=True)

yml2js := python -c '$(yml2js.py)'

$(tmp)/$(file).js: $(file).yml $(stones); @ < $< $(yml2js) > $@

js2mk.jq := .[]
js2mk.jq += | select(! .hide)
js2mk.jq += | select(.name)
js2mk.jq += | . as $$a | to_entries
js2mk.jq += | map($$a.name + "." + .key + " := " + .value)
js2mk.jq += | . += [ "repos += " + $$a.name ]
js2mk.jq += | join("\n")

js2mk := jq -r '$(js2mk.jq)'

$(tmp)/$(file).mk: $(tmp)/$(file).js; @ < $< $(js2mk) > $@

ssh = ssh -i ~/.ssh/$($1.key) -F /dev/null
clone.cmd = GIT_SSH_COMMAND="$(ssh)" git clone -b $($1.version) $($1.src) $$@
define repo
$(eval dir := $(if $($1.dir),$($1.dir)/$1,$1))
$(eval $1.head != test -d $(dir) && git -C $(dir) rev-parse --abbrev-ref HEAD)
$(dir):; $(clone.cmd)
$(if $($1.dir),$1: $(dir))
$(if $($1.dir),.PHONY: $1)
$1/clone: $1
$1/ssh: $1 $$(shell test -d $(dir) && git -C $(dir) config --get --local core.sshCommand > /dev/null || echo $1/do.ssh)
$1/conf: $1/ssh $$(shell test -d $(dir) && git -C $(dir) config --get --local user.email > /dev/null || echo $1/do.conf)
$1/sync: $1/conf $$(shell test "$($1.head)" == $($1.version) || echo $1/checkout)
endef

do.conf = $(foreach _, $($*.config), git -C $($*.dir)/$* config --add $_ "$$(git config --get --local $_)";)
do.ssh = git -C $($*.dir)/$* config --add core.sshCommand "$(call ssh,$*)"
%/do.conf %/do.ssh: dir = $(if $($*.dir),$($*.dir)/$*,$*)
%/do.conf %/do.ssh:; $($(@F))

checkout = checkout $($*.version)
%/checkout %/status %/pull:; git -C $($*.dir)/$* $(or $($(@F)),$(@F))

$(if $(show),$(foreach _, $(repos), $(warning $(call repo,$_))))
$(foreach _, $(repos), $(eval $(call repo,$_)))

$(foreach _, $(repos), $(call lineinfile,$($_.dir)/$_/,$(git.exclude)))
exclude: $(git.exclude)

ifeq ($(USER),thy)
thyepi := <t.delamare@epiconcept.fr> Thierry Delamare
thydel := <t.delamare@laposte.net>   Thierry Delamare
cedric := <c.girard@epiconcept.fr>   CÃ©dric Girard
evens  := <e.solignac@epiconcept.fr> Evens Solignac
committers := thyepi thydel cedric evens
$(foreach _, $(committers), $(call lineinfile,$_ $($_),$(mailmap)))
endif
mailmap: $(mailmap)
.PHONY: mailmap

help:; @echo WIP
